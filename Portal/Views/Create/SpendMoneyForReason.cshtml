@model SpendMoneyForReasonVM;
@{
    ViewData["Title"] = "أحصائيات بسبب معين";
    string anser = Model.IsHasRecodes ? "نعم" : "لا";

}
<!-- Content Page -->
<div class="container-xxl flex-grow-1 container-p-y">
    <div class="card mb-4">
        <div class="card-header d-flex align-items-center justify-content-between">
            <h5 class="mb-0">صرفم مبلغ لبسبب معين</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <label class="col-sm-2 col-form-label-lg">اختر السبب</label>
                <div class="col-sm-3">
                    <select name="ReasonId" id="ReasonList" class="select2 form-select-lg ">
                        <option value="">أختر سبب</option>
                        @foreach (var item in Model.Reasons)
                        {
                            if (item.IsSelected)
                            {
                                <option selected value="@item.Value">@item.Text</option>
                            }
                            else
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="row mb-3" id="flatpickrDiv" style="display:none">
                <label class="col-sm-2 col-form-label-lg">الشهر</label>
                <div class="col-sm-3">
                    <input type="text" class="form-control flatpickr-input active" placeholder="YY-MM" id="flatpickr-date" readonly="readonly">
                </div>
            </div>
            @if (Model.AmountSubscribed > 0)
            {
                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label-lg">مبلغ الصرف</label>

                    <div class="col-sm-3">
                        <div class="input-group">
                            <input type="number" id="AmountSubscribedInput" value="@Model.AmountSubscribed" class="form-control col-md-5">
                            <button class="btn btn-outline-warning" disabled id="AmountSubscribedSplitBtn" type="button" id="button-addon2">توزيع</button>
                        </div>
                    </div>
                </div>
            }
            @if (Model.IsSelected)
            {
                <div class="row mb-3" id="HasRecordDiv">
                    <label class="col-sm-2 col-form-label-lg">تم الصرف مسبقا</label>
                    <div class="col-sm-3">
                        @{
                            if (Model.IsHasRecodes)
                            {
                                <span class="badge bg-success">
                                    <label style="font-size:larger">
                                        @anser
                                    </label>
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-danger">
                                    <label style="font-size:large">
                                        @anser
                                    </label>
                                </span>
                            }
                        }
                    </div>
                </div>
            }
            <div class="row mb-3">
                <div class="col-sm-3">
                    <button type="button" class="btn btn-primary" disabled id="ShowAllNamesBtn">عرض</button>
                    <button type="button" class="btn btn-dark" disabled id="ClearAll">تصفية الخانات</button>
                </div>
            </div>
        </div>
    </div>
    <div class="card" id="CardDetailsDiv" style="display:none;">
        <div class="card-header d-flex align-items-center justify-content-between">
            <h5 class="mb-0">جميع الأسماء المرتبطة بالسبب</h5>
            <button type="button" class="btn btn-primary" onclick="CollectData()">حفظ</button>

        </div>
        <div class="card-body">
            @if (Model.IsSelected)
            {
                @if (Model.AllPersonInSystem.Any() || Model.SpendMoneySubmitedAmount.Any())
                {
                    <div class="form-check mb-5">
                        <input class="form-check-input" type="checkbox" checked
                               id="selectAll">
                        <label class="form-check-label" for="selectAll">تحديد الجميع وأعادة توزيع مبلغ الأشتراك</label>
                    </div>
                    if (Model.SpendMoneySubmitedAmount is not null && Model.SpendMoneySubmitedAmount.Count > 0)
                    {
                        @foreach (var item in Model.SpendMoneySubmitedAmount)
                        {
                            <div class="row mb-3">
                                <label class="col-sm-1 col-form-label na-person" data-PersonId="@item.PersonId">@item.PersonName</label>
                                <div class="col-sm-8">

                                    <div class="col-md-4">
                                        <label class="col-form-label-sm col-md-6">دفع المبلغ؟</label>
                                        <div class="form-check form-check-success form-check-inline">
                                            <input class="form-check-input IsPaid-checkbox checkbox-group" type="checkbox" data-input-id="@item.PersonId" @(item.IsPaid ? "checked" : "")>
                                            <label class="form-check-label col-form-label-sm">نعم</label>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <label class="col-md-2 col-form-label-sm">المبلغ</label>
                                        <div class="col-md-2">
                                            <input class="form-control form-control-sm Amount-inputs" value="@item.Amount" type="number" data-PersonId="@item.PersonId" @(item.IsPaid ? "" : "disabled")>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        @foreach (var item in Model.AllPersonInSystem)
                        {
                            <div class="row mb-3">
                                <label class="col-sm-1 col-form-label">@item.PersonName</label>
                                <div class="col-sm-8">
                                    <div class="col-md-4">
                                        <label class="col-form-label-sm col-md-6">دفع المبلغ؟</label>
                                        <div class="form-check form-check-success form-check-inline">
                                            <input class="form-check-input IsPaid-checkbox checkbox-group" type="checkbox" data-input-id="@item.PersonId" @(item.IsPaid ? "checked" : "")>
                                            <label class="form-check-label col-form-label-sm">نعم</label>
                                        </div>
                                    </div>
                                    <div class="row mb-3">
                                        <label class="col-md-2 col-form-label-sm">المبلغ</label>
                                        <div class="col-md-2">
                                            <input class="form-control form-control-sm Amount-inputs" value="@item.Amount" type="number" data-PersonId="@item.PersonId" @(item.IsPaid ? "" : "disabled")>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="row mb-3">
                        <label class="col-sm-1 col-form-label">لا يوجد أسماء مرتبطة بالسبب</label>
                    </div>
                }
            }
            @* <div class="card-body">
            @if (Model.IsSelected)
            {
            <div class="col-12">
            <div class="table-responsive">
            <table class="table table-flush-spacing">
            <tbody>
            @if (Model.AllPersonInSystem.Any() || Model.SpendMoneySubmitedAmount.Any())
            {
            <tr>
            <td class="text-nowrap">
            تم صرف المبلغ للجميع؟
            <i class="bx bx-info-circle bx-xs" data-bs-toggle="tooltip" data-bs-placement="top" aria-label="جميع من بلاقائمة تمك صرف لهم المبالغ الدد بجانب اسهم"></i>
            </td>
            <td>
            <div class="form-check">
            <input class="form-check-input" type="checkbox" checked
            id="selectAll">
            <label class="form-check-label" for="selectAll">تحديد الجميع وأعادة توزيع مبلغ الأشتراك</label>
            </div>
            </td>
            </tr>



            if (Model.SpendMoneySubmitedAmount is not null && Model.SpendMoneySubmitedAmount.Count > 0)
            {
            @foreach (var item in Model.SpendMoneySubmitedAmount)
            {
            <tr>
            <td class="na-person" data-PersonId="@item.PersonId" hidden>
            @item.PersonName
            </td>
            <td class="text-nowrap">@item.PersonName</td>
            <td class="row">
            <div class="d-flex">
            <div class="form-check col-md-5 form-check-success form-check-inline">
            <input class="form-check-input IsPaid-checkbox" type="checkbox" data-input-id="@item.PersonId" @(item.IsPaid ? "checked" : "")>
            <label class="form-check-label col-form-label-sm">دفع المبلغ؟</label>
            </div>
            <div class="d-flex" style="display: none;">
            <label class="col-md-3 col-form-label-sm">المبلغ</label>
            <div class="col-md-10">
            <input class="form-control form-control-sm Amount-inputs" value="@item.Amount" type="number" data-PersonId="@item.PersonId" @(item.IsPaid ? "" : "disabled")>
            </div>
            </div>
            </div>
            </td>
            </tr>
            }
            }
            else
            {
            @foreach (var item in Model.AllPersonInSystem)
            {
            <tr>
            <td class="text-nowrap">@item.PersonName</td>
            <td class="na-person" data-PersonId="@item.PersonId" hidden>
            @item.PersonName
            </td>
            <td>
            <div class="d-flex gap-2">
            <label class="form-check-label col-form-label-sm col-md-1">دفع المبلغ؟</label>
            <div class="form-check col-md-1 form-check-success form-check-inline">
            <input class="form-check-input IsPaid-checkbox checkbox-group" type="checkbox" data-input-id="@item.PersonId" @(item.IsPaid ? "checked" : "")>
            <label class="form-check-label col-form-label-sm">نعم</label>
            </div>
            </div>
            <br />
            <div class="d-flex gap-4">
            <label class="col-form-label-sm">المبلغ</label>
            <div class="col-md-2">
            <input class="form-control form-control-sm Amount-inputs PersonId-@item.PersonId" value="@item.Amount" type="number" data-PersonId="@item.PersonId" @(item.IsPaid ? "" : "disabled")>
            </div>
            </div>
            </td>
            </tr>
            }
            }

            }
            else
            {
            <tr>
            <td colspan="2" class="text-center">لا يوجد أسماء مرتبطة بالسبب</td>
            </tr>
            }
            </tbody>
            </table>
            </div>
            <!-- Permission table -->
            </div>

            }
            </div> *@
        </div>
    </div>
</div>


<div class="modal fade" id="ConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-add-new-address">
        <div class="modal-content p-3 p-md-5">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-4">
                    <h3 class="address-title">التأكيد على حفظ الاسماء</h3>
                </div>
                <form id="ConfirmModalForm" class="row g-3" onsubmit="return false">
                    <div class="text-center mb-4">
                        <h5 class="address-title">
                            جميع الأسماء الأشخاص الذين تم تحديدهم للدفع مع المبلغ المحدد
                        </h5>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-success " id="WillPaidTable">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-danger table-flush-spacing" id="WillNotSelectedTable">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-info table-flush-spacing" id="BicStatestic">
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                    <div class="col-12 text-center mt-4">
                        <button type="submit" id="ConfirmModalFormSubmit" class="btn btn-warning me-sm-3 me-1">حفظ مع التأكيد</button>
                        <button type="reset"
                                class="btn btn-label-secondary"
                                data-bs-dismiss="modal"
                                aria-label="Close">
                            إلغاء الأمر
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



@section Stylesheet {
    <link rel="stylesheet" href="~/assets/vendor/libs/select2/select2.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/typeahead-js/typeahead.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/flatpickr/flatpickr.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/flatpickr/monthSelect/style.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/toastr/toastr.css">

}

@section Scripts {
    <script src="~/assets/vendor/libs/select2/select2.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/flatpickr.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/monthSelect/index.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/monthSelect/monthSelect.js"></script>
    <script src="~/assets/vendor/libs/toastr/toastr.js"></script>


    <script>


        $(document).ready(function () {
            var IsDark = !document.documentElement.classList.contains("light-style");
            // Initialize the select2 plugin for the ReasonList dropdown
            $("#ReasonList").select2({
                allowClear: true,
                placeholder: 'اختر'
            });



            // Check if the 'IsSelected' value is true or false
            var IsSelected = '@Model.IsSelected';
            var isHasRecodes = '@Model.IsHasRecodes';

            // Get the current year and month in the format 'yyyy-MM'
            var YearMonth = '@Model.YearMonth'; // Example: '2021-01'
            var year2digit = new Date().getFullYear().toString()
            var dayNow = year2digit + '-' + (new Date().getMonth() + 1);
            var dateformat = YearMonth === '' ? dayNow : YearMonth;

            // Initialize the flatpickr date picker
            flatpickr("#flatpickr-date", {
                altInput: true,
                defaultDate: dateformat,
                plugins: [
                    new monthSelectPlugin({
                        shorthand: true, // Use shorthand month names
                        dateFormat: "Y-m", // Display format 'year-month'
                        altFormat: "F Y", // Format for the alternative input display
                        theme: IsDark ? "dark" : "light" // Set the theme to light
                    })
                ],
                locale: {
                    // Define Arabic month names
                    months: {
                        shorthand: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
                        longhand: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
                    }
                }
            });

            // Handle 'select2:unselect' event to hide content when ReasonList is cleared
            $("#ReasonList").on('select2:unselect', function (e) {
                hideAll();
            });
            $("#ReasonList").on('select2:clear', function (e) {
                hideAll();
            });

            // Handle selection change in the ReasonList dropdown
            $("#ReasonList").change(function () {
                var value = $(this).val();
                if (value !== '' && value !== null) {
                    $("#flatpickrDiv").show();
                }
            });

            // Handle change event of the flatpickr date picker
            $("#flatpickr-date").change(function () {
                var data = $(this).val();
                var ReasonId = $("#ReasonList").val();
                var isValid = data !== '' && ReasonId !== '' && data !== undefined && data !== null;
                if (isValid) {
                    $("#ShowAllNamesBtn").prop("disabled", false);
                    $("#ClearAll").prop("disabled", false);
                }
            });


            // Function to hide all related elements
            function hideAll() {
                $("#flatpickr-date").val(null);
                $("#AmountSubscribedDiv").hide();
                $("#flatpickrDiv").hide();
                $("#ShowAllNamesBtn").prop("disabled", true);
                $("#ClearAll").prop("disabled", true);
                $("#CardDetailsDiv").hide();
                $("#HasRecordDiv").hide();

            }

            // Check 'IsSelected' and show the flatpickr date picker if it's true
            if (IsSelected === 'True') {
                $("#flatpickrDiv").show();
                $("#ShowAllNamesBtn").prop("disabled", false);
                $("#ClearAll").prop("disabled", false);
                $("#CardDetailsDiv").show();

            }

            // Handle the "ShowAllNamesBtn" click event
            $("#ShowAllNamesBtn").click(function () {
                var ReasonId = $("#ReasonList").val();
                var date = $("#flatpickr-date").val();
                var isValid = date !== '' && ReasonId !== '' && date !== undefined && date !== null;
                if (!isValid) {
                    alert("الرجاء اختيار سبب وتاريخ");
                    return;
                } else {
                    window.location.href = '@Url.Action("SpendMoneyForReason", "Create")?ReasonId=' + ReasonId + '&YearMonth=' + date;
                }
            });
            $("#ClearAll").click(function () {
                window.location.href = '@Url.Action("SpendMoneyForReason", "Create")';
            });


            // Get references to elements
            const selectAll = document.querySelector('#selectAll');
            const IsPaidCheckboxList = document.querySelectorAll('.IsPaid-checkbox');
            var amountInputList = document.querySelectorAll('.Amount-inputs');

            // Amount data
            var AmountSubscribed = $('#AmountSubscribedInput').val();
            var amountInputCount = amountInputList.length;
            var initialAmountPerInput = parseFloat(AmountSubscribed / amountInputCount).toFixed(3);

            AmountSubscribedInput.addEventListener('input', (event) => {
                $('#AmountSubscribedSplitBtn').prop('disabled', false);
            });

            // if AmountSubscribedInput has iput value
            $('#AmountSubscribedSplitBtn').click(function () {
                var value = $('#AmountSubscribedInput').val();

                AmountSubscribed = parseFloat(value).toFixed(3);

                amountInputList = document.querySelectorAll('.Amount-inputs:not([disabled])');
                amountInputCount = amountInputList.length;
                initialAmountPerInput = parseFloat(AmountSubscribed / amountInputCount).toFixed(3);
                initialAmountPerInput = parseFloat(initialAmountPerInput).toFixed(3);
                if (amountInputList.length > 0) {
                    amountInputList.forEach((input) => {
                        if (input != 0) {
                            input.value = initialAmountPerInput;
                        }
                    });
                    initializeAmountInputs();
                } else {
                    alert('لا يوجد أشخاص محددين للدفع');
                }
            });


            // Event listeners
            if (selectAll) {
                selectAll.addEventListener('change', (event) => {
                    const isChecked = event.target.checked;
                    IsPaidCheckboxList.forEach((checkbox) => {
                        checkbox.checked = isChecked;
                        disabledAmountPersonInput(checkbox);
                    });
                });
            }
            IsPaidCheckboxList.forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    if (!checkbox.checked) {
                        divideAmountPersonToRestOfPersons(checkbox);
                        disabledAmountPersonInput(checkbox);
                    }
                    else {
                        RestoreAmountPersonToRestOfPersons(checkbox);
                        const PersonId = checkbox.getAttribute('data-input-id');
                        const AmountPersonElement = document.querySelector(`.Amount-inputs[data-PersonId="${PersonId}"]`);
                        AmountPersonElement.disabled = !checkbox.checked;
                    }

                });
            });


            function disabledAmountPersonInput(checkbox) {
                const PersonId = checkbox.getAttribute('data-input-id');
                // get all Amount-inputs Elements where data-PersonId = PersonId
                const AmountPersonElement = document.querySelector(`.Amount-inputs[data-PersonId="${PersonId}"]`);
                AmountPersonElement.disabled = !checkbox.checked;
                AmountPersonElement.value = checkbox.checked ? initialAmountPerInput : 0; // set the value to 0 if the checkbox is unchecked (is not paid)
            }


            // Initialize amount inputs
            initializeAmountInputs();

            function initializeAmountInputs() {
                if (isHasRecodes == 'True') {
                    return;
                }
                amountInputList.forEach((input) => {
                    input.value = initialAmountPerInput;
                });
            }
            function divideAmountPersonToRestOfPersons(checkbox) {
                const PersonId = checkbox.getAttribute('data-input-id');
                const AmountPersonElement = document.querySelector(`.Amount-inputs[data-PersonId="${PersonId}"]`);
                const AmountPersonValue = parseFloat(AmountPersonElement.value).toFixed(3);

                if (AmountPersonValue === 0) {
                    return;
                }

                let EnabledAmountInputCount = 0;
                const EnabledamountInputList = document.querySelectorAll('.Amount-inputs:not([disabled])');

                if (EnabledamountInputList.length > 0) {
                    EnabledAmountInputCount = EnabledamountInputList.length - 1;
                }

                let AmountPerPerson = 0;

                if (EnabledAmountInputCount !== 0) {
                    AmountPerPerson = parseFloat((AmountPersonValue / EnabledAmountInputCount)).toFixed(3);
                }

                let AmountPerPersonRounded = 0.000;

                if (AmountPerPerson !== 0) {
                    AmountPerPersonRounded = Math.round(AmountPerPerson * 1000) / 1000;
                }

                if (AmountPerPersonRounded !== 0) {
                    EnabledamountInputList.forEach((input) => {
                        if (input.getAttribute('data-PersonId') !== PersonId) {
                            input.value = Math.round((parseFloat(input.value) + AmountPerPersonRounded) * 1000) / 1000;
                        }
                    });
                }
            }


            function RestoreAmountPersonToRestOfPersons(checkbox) {
                // Set the amount of the person that enabled the checkbox to 0
                const personId = checkbox.getAttribute('data-input-id');
                const amountPersonElement = document.querySelector(`.Amount-inputs[data-PersonId="${personId}"]`);

                let enabledAmountInputCount = 0;
                const enabledAmountInputList = document.querySelectorAll('.Amount-inputs:not([disabled])');

                if (enabledAmountInputList.length > 0) {
                    enabledAmountInputCount = enabledAmountInputList.length;
                    enabledAmountInputCount++;
                } else {
                    var AmountSubscribed = $('#AmountSubscribedInput').val();
                    amountPersonElement.value = parseFloat(AmountSubscribed).toFixed(3);
                    return;
                }

                // get total amount of all enabled amount inputs
                let enabledTotalAmount = 0;
                enabledAmountInputList.forEach((input) => {
                    enabledTotalAmount += parseFloat(input.value);
                });

                InputListValue = 0;
                if (enabledTotalAmount > 0) {
                    InputListValue = parseFloat(enabledTotalAmount / enabledAmountInputCount).toFixed(3);
                }


                var amountResult = parseFloat(InputListValue).toFixed(3);

                // Subtract the amount of the person from all enabled amount inputs
                enabledAmountInputList.forEach((input) => {
                    var inputPersonValue = parseFloat(input.value);
                    var round = 0;
                    if (inputPersonValue > 0) {
                        var math = inputPersonValue - amountResult;
                        round = parseFloat(math).toFixed(3);
                    }
                    input.value = parseFloat(inputPersonValue - round).toFixed(3);
                });

                amountPersonElement.value = amountResult;
            }
            var DelayTimerInMilliseconds = 0.5 * 1000;
            let timer;

            // if one of the amount inputs has a increased or decreased value by the user then the rest of the amount inputs will effect by the change value
            amountInputList.forEach((input) => {
                input.addEventListener('input', (event) => {

                    clearTimeout(timer)

                    timer = setTimeout(() => {
                        debugger;
                        var value = parseFloat(event.target.value).toFixed(2.5); //
                        var personId = event.target.getAttribute('data-PersonId');
                        var personCheckbox = document.querySelector(`.IsPaid-checkbox[data-input-id="${personId}"]`);
                        if (personCheckbox.checked) {
                            var amountInputs = document.querySelectorAll('.Amount-inputs:not([disabled])');
                            var numInputs = amountInputs.length;
                            var AmountSubscribed = parseFloat($('#AmountSubscribedInput').val()).toFixed(3);

                            var diff = parseFloat(AmountSubscribed - value).toFixed(3);
                            var diffPerInput = parseFloat(diff / (numInputs - 1)).toFixed(3);
                            diffPerInput = diffPerInput > 0 ? diffPerInput : 0;
                            amountInputs.forEach((input) => {
                                if (input.getAttribute('data-PersonId') !== personId) {
                                    input.value = diffPerInput;
                                }
                            });
                            console.log('diffPerInput', diffPerInput);
                            var personName = $('.na-person[data-PersonId="' + personId + '"]').text().trim();
                            console.log('personName', personName);
                            var message = '';
                            if (diffPerInput == 0) {
                                var personName = $('.na-person[data-PersonId="' + personId + '"]').text();
                                message = 'الفاضل ' + personName + '  سيدفع المبلغ الكامل من مبلغ الصرف وهو ' + value + ' ريال';
                            } else if (diffPerInput > 0) {
                                message = 'تم توزيع مجموع المبلغ ' + diff + ' ريال على ' + (numInputs - 1) + ' أشخاص بمقدار ' + diffPerInput + ' ريال لكل شخص';
                            }

                            toastr.success(message, 'تم', {
                                timeOut: 8000,
                                progressBar: true,
                                positionClass: 'toast-top-center'
                            });
                        }
                    }, DelayTimerInMilliseconds)
                });
            });







        });

        function ClearAll() {
            $("#ReasonList").val(null).trigger('change');
            $("#flatpickr-date").val(null);
            $("#AmountSubscribedDiv").hide();
            $("#flatpickrDiv").hide();
            $("#ShowAllNamesBtn").prop("disabled", true);
            $("#CardDetailsDiv").hide();
            $("#HasRecordDiv").hide();

        }
        function CollectData() {
            const PersonIdAmount = [];
            var IsPaidCheckboxList = document.querySelectorAll('.IsPaid-checkbox');
            IsPaidCheckboxList.forEach((checkbox) => {
                var PersonId = checkbox.getAttribute('data-input-id');
                var AmountPersonElement = document.querySelector(`.Amount-inputs[data-PersonId="${PersonId}"]`);
                var Amount = AmountPersonElement.value; //593.354500000004 to 593.3545
                Amount = parseFloat(Amount).toFixed(3); // 593.3545 to 593.35
                PersonIdAmount.push(
                    {
                        'PersonId': PersonId,
                        'IsPaid': checkbox.checked,
                        'Amount': parseFloat(Amount)
                    }
                );
            });
            var IsRecord = '@Model.IsHasRecodes';
            var MonthYear = '@Model.YearMonth';
            var ReasonId = '@Model.ReasonId';
            var MonthlyAmountRecord = $('#AmountSubscribedInput').val();

            if (MonthlyAmountRecord == 0 || MonthlyAmountRecord == '') {
                alert('أكتب مبلغ الصرف وضغط زر الأنتر او الأدخال')
                return;
            }

            var data = {
                'ReasonId': ReasonId,
                'PersonIdAmount': PersonIdAmount,
                'IsRecord': IsRecord,
                'MonthYear': MonthYear,
                'MonthlyAmountRecord': MonthlyAmountRecord
            };
            debugger;
            console.log(data);

            FillTruePaid(data.PersonIdAmount);

            $('#ConfirmModal').modal('show');
            $('#ConfirmModalFormSubmit').click(function () {
                //PersonIdAmount.length = 0;
                SaveData(data);
            });
        }
        function SaveData(data) {
            $.ajax({
                url: '@Url.Action("ModifySpendMoneyForReasonAjax", "Create")',
                type: 'POST',
                data: data,
                success: function (response) {
                    if (response.status) {
                        alert("تم الحفظ بنجاح");
                        var url = '@Url.Action("SpendMoneyForReason", "Create")';
                        url += '?ReasonId=' + '@Model.ReasonId';
                        url += '&YearMonth=' + '@Model.YearMonth';
                        window.location.href = url;
                    } else {
                        alert(response.message);
                    }
                },
                error: function (response) {
                    alert("حدث خطأ أثناء الحفظ");
                }
            });

        }


        function FillTruePaid(MonthlyPaidData) {
            var WillPaidTable = $('#WillPaidTable');
            var WillNotSelectedTable = $('#WillNotSelectedTable');
            var WillPaidTableBody = WillPaidTable.find('tbody');
            var WillNotSelectedTableBody = WillNotSelectedTable.find('tbody');

            // BicStatestic
            var BicStatestic = $('#BicStatestic');
            var BicStatesticBody = BicStatestic.find('tbody');
            BicStatesticBody.empty();
            // عدد  الأشخاص الذين دفعوا
            var WillPaidCount = 0;
            // عدد الأشخاص الذين لم يدفعوا
            var WillNotSelectedCount = 0;
            // مجموع المبالغ التي تم دفعها
            let WillPaidAmount = 0;

            WillPaidTableBody.empty();
            WillNotSelectedTableBody.empty();

            var WillPaidTableBodyHtml = '';
            var WillNotSelectedTableBodyHtml = '';
            MonthlyPaidData.forEach((item) => {
                var Amount = parseFloat(item.Amount);
                if (item.IsPaid) {
                    WillPaidCount++;
                    WillPaidAmount += Amount;
                    var Name = $('.na-person[data-PersonId="' + item.PersonId + '"]').text();
                    WillPaidTableBodyHtml += '<tr><td>' + Name + '</td><td>' + Amount + ' ريال</td></tr>';
                }
                else {
                    var Name = $('.na-person[data-PersonId="' + item.PersonId + '"]').text();
                    WillNotSelectedTableBodyHtml += '<tr><td>' + Name + '</td></tr>';
                    WillNotSelectedCount++;
                }

            });
            WillPaidTableBody.append(WillPaidTableBodyHtml);
            WillNotSelectedTableBody.append(WillNotSelectedTableBodyHtml);

            WillPaidAmount = WillPaidAmount.toFixed(3);
            var WillPaidCountTaxt = 'عدد الأشخاص الذين دفعوا : ' + WillPaidCount + ' أشخاص';
            var WillNotSelectedCountTaxt = 'عدد الأشخاص الذين لم يدفعوا : ' + WillNotSelectedCount + ' أشخاص'
            var WillPaidAmountTaxt = 'مجموع المبالغ التي تم دفعها : ' + WillPaidAmount + ' ريال';
            var BicStatesticBodyHtml = '<tr><td>' + WillPaidCountTaxt + '</td></tr><tr><td>' + WillNotSelectedCountTaxt + '</td></tr><tr><td>' + WillPaidAmountTaxt + '</td></tr>';
            BicStatesticBody.append(BicStatesticBodyHtml);


        }












    </script>



}

