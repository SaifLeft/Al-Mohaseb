@model SpendMoneyForReasonVM;
@{
    ViewData["Title"] = "أحصائيات بسبب معين";
    string anser = Model.IsHasRecodes ? "نعم" : "لا";

}
<!-- Content Page -->
<div class="container-xxl flex-grow-1 container-p-y">
    <div class="card mb-4">
        <div class="card-header d-flex align-items-center justify-content-between">
            <h5 class="mb-0">صرفم مبلغ لبسبب معين</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <label class="col-sm-2 col-form-label-lg">اختر السبب</label>
                <div class="col-sm-3">
                    <select name="ReasonId" id="ReasonList" class="select2 form-select-lg ">
                        <option value="">أختر سبب</option>
                        @foreach (var item in Model.Reasons)
                        {
                            if (item.IsSelected)
                            {
                                <option selected value="@item.Value">@item.Text</option>
                            }
                            else
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="row mb-3" id="flatpickrDiv" style="display:none">
                <label class="col-sm-2 col-form-label-lg">الشهر</label>
                <div class="col-sm-3">
                    <input type="text" class="form-control flatpickr-input active" placeholder="YY-MM" id="flatpickr-date" readonly="readonly">
                </div>
            </div>
            @if (Model.AmountSubscribed > 0)
            {
                <div class="row mb-3 AmountSubscribedDiv">
                    <label class="col-sm-2 col-form-label-lg">مبلغ الصرف</label>

                    <div class="col-sm-3">
                        <div class="input-group">
                            <input type="number" id="totalAmount" value="@Model.AmountSubscribed" class="form-control col-md-5">
                            <button type="button" class="btn btn-warning" id="distribute">توزيع</button>
                        </div>
                    </div>
                </div>
            }
            @if (Model.IsSelected)
            {
                <div class="row mb-3" id="HasRecordDiv">
                    <label class="col-sm-2 col-form-label-lg">تم الصرف مسبقا</label>
                    <div class="col-sm-3">
                        @{
                            if (Model.IsHasRecodes)
                            {
                                <span class="badge bg-success">
                                    <label style="font-size:larger">
                                        @anser
                                    </label>
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-danger">
                                    <label style="font-size:large">
                                        @anser
                                    </label>
                                </span>
                            }
                        }
                    </div>
                </div>
            }
            <div class="row mb-3">
                <div class="col-sm-3">
                    <button type="button" class="btn btn-primary" disabled id="ShowAllNamesBtn">عرض</button>
                    <button type="button" class="btn btn-dark" disabled id="ClearAll">تصفية الخانات</button>
                </div>
            </div>
        </div>
    </div>
    <div class="card" id="CardDetailsDiv" style="display:none;">
        <div class="card-header d-flex align-items-center justify-content-between">
            <h5 class="mb-0">جميع الأسماء المرتبطة بالسبب</h5>
            <button type="button" class="btn btn-primary" onclick="CollectData()">حفظ</button>
        </div>
        <div class="card-body">
            @if (Model.IsSelected)
            {
                @if (Model.AllPersonInSystem.Any() || Model.SpendMoneySubmitedAmount.Any())
                {
                    var data = !Model.AllPersonInSystem.Any() ? Model.SpendMoneySubmitedAmount : Model.AllPersonInSystem;
                    <div class="col">
                        <table id="mainTable" class="table table-bordered table-hover w-55">
                            <thead>
                                <tr>
                                    <th>
                                        <div class="form-check form-check-red form-check-inline">
                                            <input class="form-check-input" type="checkbox" id="selectAll">
                                            <label for="selectAll">جميع الأسماء</label>
                                        </div>
                                    </th>
                                    <th>
                                        مبلغ الصرف للشحص
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="individuals">
                                @foreach (var item in data)
                                {
                                    var PersonId = item.PersonId;
                                    var Amount = item.Amount;
                                    var IsPaid = item.IsPaid;
                                    var IsFixed = item.IsFixed;
                                    var PersonName = item.PersonName;
                                    bool isDisabled = IsFixed || !IsPaid;
                                    <tr class="individual" data-PersonId="@PersonId" data-PersonName="@PersonName">
                                        <td>
                                            <div class="form-check form-check-success form-check-inline">
                                                <input class="form-check-input checkbox-group select-individual" type="checkbox" @(IsPaid ? "checked" : "")>
                                                <label class="na-person form-check-label">@PersonName</label>
                                            </div>
                                            <div class="form-check form-check-warning form-check-inline float-end">
                                                <input class="form-check-input checkbox-group fix-individual" type="checkbox" @(IsFixed ? "checked" : "")>
                                                <i class="bx bx-lock"></i>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="col">
                                                <input class="form-control form-control-sm amount" value="@Amount" type="number" @(isDisabled ? "disabled" : "")>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="row mb-3">
                        <label class="col-sm-1 col-form-label">لا يوجد أسماء مرتبطة بالسبب</label>
                    </div>
                }
            }
        </div>
    </div>
</div>


<div class="modal fade" id="ConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-add-new-address">
        <div class="modal-content p-3 p-md-5">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-4">
                    <h3 class="address-title">التأكيد على حفظ الاسماء</h3>
                </div>
                <form id="ConfirmModalForm" class="row g-3" onsubmit="return false">
                    <div class="text-center mb-4">
                        <h5 class="address-title">
                            جميع الأسماء الأشخاص الذين تم تحديدهم للدفع مع المبلغ المحدد
                        </h5>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-success " id="WillPaidTable">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-danger table-flush-spacing" id="WillNotSelectedTable">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-info table-flush-spacing" id="BicStatestic">
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                    <div class="col-12 text-center mt-4">
                        <button type="submit" id="ConfirmModalFormSubmit" class="btn btn-warning me-sm-3 me-1">حفظ مع التأكيد</button>
                        <button type="reset"
                                class="btn btn-label-secondary"
                                data-bs-dismiss="modal"
                                aria-label="Close">
                            إلغاء الأمر
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>



@section Stylesheet {
    <link rel="stylesheet" href="~/assets/vendor/libs/select2/select2.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/typeahead-js/typeahead.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/flatpickr/flatpickr.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/flatpickr/monthSelect/style.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/toastr/toastr.css">

}

@section Scripts {
    <script src="~/assets/vendor/libs/select2/select2.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/flatpickr.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/monthSelect/index.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/monthSelect/monthSelect.js"></script>
    <script src="~/assets/vendor/libs/toastr/toastr.js"></script>


    <script>


        $(document).ready(function () {
            var IsDark = !document.documentElement.classList.contains("light-style");
            // Initialize the select2 plugin for the ReasonList dropdown
            $("#ReasonList").select2({
                allowClear: true,
                placeholder: 'اختر'
            });


            // Check if the 'IsSelected' value is true or false
            var IsSelected = '@Model.IsSelected';
            var isHasRecodes = '@Model.IsHasRecodes';

            // Get the current year and month in the format 'yyyy-MM'
            var YearMonth = '@Model.YearMonth'; // Example: '2021-01'

            // Initialize the flatpickr date picker
            flatpickr("#flatpickr-date", {
                altInput: true,
                defaultDate: YearMonth === '' ? null : YearMonth,
                plugins: [
                    new monthSelectPlugin({
                        shorthand: true, // Use shorthand month names
                        dateFormat: "Y-m", // Display format 'year-month'
                        altFormat: "F Y", // Format for the alternative input display
                        theme: IsDark ? "dark" : "light" // Set the theme to light
                    })
                ],
                locale: {
                    // Define Arabic month names
                    months: {
                        shorthand: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
                        longhand: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
                    }
                }
            });

            // Handle 'select2:unselect' event to hide content when ReasonList is cleared
            $("#ReasonList").on('select2:unselect', function (e) {
                hideAll();
            });
            $("#ReasonList").on('select2:clear', function (e) {
                hideAll();
            });

            // Handle selection change in the ReasonList dropdown
            $("#ReasonList").change(function () {
                var value = $(this).val();
                if (value !== '' && value !== null) {
                    $("#flatpickrDiv").show();
                }
            });

            // Handle change event of the flatpickr date picker
            $("#flatpickr-date").change(function () {
                var data = $(this).val();
                var ReasonId = $("#ReasonList").val();
                var isValid = data !== '' && ReasonId !== '' && data !== undefined && data !== null;
                if (isValid) {
                    $("#ShowAllNamesBtn").prop("disabled", false);
                    $("#ClearAll").prop("disabled", false);
                }
            });


            // Function to hide all related elements
            function hideAll() {
                $("#flatpickr-date").val(null);
                $(".AmountSubscribedDiv").hide();
                $("#flatpickrDiv").hide();
                $("#ShowAllNamesBtn").prop("disabled", true);
                $("#ClearAll").prop("disabled", true);
                $("#CardDetailsDiv").hide();
                $("#HasRecordDiv").hide();

            }

            // Check 'IsSelected' and show the flatpickr date picker if it's true
            if (IsSelected === 'True') {
                $("#flatpickrDiv").show();
                $("#ShowAllNamesBtn").prop("disabled", false);
                $("#ClearAll").prop("disabled", false);
                $("#CardDetailsDiv").show();

            }

            // Handle the "ShowAllNamesBtn" click event
            $("#ShowAllNamesBtn").click(function () {
                var ReasonId = $("#ReasonList").val();
                var date = $("#flatpickr-date").val();
                var isValid = date !== '' && ReasonId !== '' && date !== undefined && date !== null;
                if (!isValid) {
                    alert("الرجاء اختيار سبب وتاريخ");
                    return;
                } else {
                    window.location.href = '@Url.Action("SpendMoneyForReason", "Create")?ReasonId=' + ReasonId + '&YearMonth=' + date;
                }
            });
            $("#ClearAll").click(function () {
                window.location.href = '@Url.Action("SpendMoneyForReason", "Create")';
            });


            $('.amount').on('input', function () {
                updateAmountsBasedOnInput($(this));
            });

            $('#distribute').click(function () {
                let totalAmount = parseFloat($('#totalAmount').val());
                if (isNaN(totalAmount) || totalAmount <= 0) {
                    toastr.error('الرجاء إدخال مبلغ الصرف');
                    return;
                }
                let individualCount = $('.individual').length;
                if (individualCount === 0) {
                    toastr.error('لا يوجد أسماء للتوزيع عليها');
                    return;
                }
                let selectIndividualCount = $('.select-individual:checked').length;
                if (selectIndividualCount === 0) {
                    toastr.error('الرجاء تحديد أسماء للتوزيع عليها');
                    return;
                }

                distributeAmount();
            });

            $('#selectAll').on('change', function () {
                var isChecked = $(this).is(':checked');
                if (isChecked) {
                    $('.individual').each(function () {
                        $(this).find('.select-individual').prop('checked', true);
                    });
                    distributeAmount();
                    toastr.success('تم توزيع المبلغ على الجميع');
                } else {
                    $('.individual').each(function () {
                        $(this).find('.select-individual').prop('checked', false);
                        $(this).find('.fix-individual').prop('checked', false);
                    });
                    distributeAmount();
                    toastr.warning('تم إلغاء التوزيع');
                }
            });

            function distributeAmount() {
                let totalAmount = parseFloat($('#totalAmount').val());
                let fixedAmounts = 0;
                let variableIndividuals = [];

                // Calculate fixed amounts and identify variable individuals
                $('.individual').each(function () {
                    let $checkbox = $(this).find('.select-individual');
                    let $fixCheckbox = $(this).find('.fix-individual');
                    let $amountInput = $(this).find('.amount');

                    if ($fixCheckbox.is(':checked')) {
                        $amountInput.prop("disabled", true);
                        let fixedAmount = parseFloat($amountInput.val());
                        fixedAmounts += fixedAmount;
                    } else if ($checkbox.is(':checked')) {
                        $amountInput.prop("disabled", false);
                        $fixCheckbox.prop("disabled", false);
                        variableIndividuals.push($amountInput);
                    } else {
                        $amountInput.prop("disabled", true);
                        $fixCheckbox.prop("disabled", true);
                        $amountInput.val('0.000'); // Ensuring it shows 0.000 when disabled
                        $checkbox.prop("disabled", false);
                    }
                });

                // Calculate remaining amount and amount per individual
                let remainingAmount = totalAmount - fixedAmounts;
                let variableCount = variableIndividuals.length;

                if (variableCount > 0) {
                    let amountPerIndividual = Math.floor((remainingAmount / variableCount) * 1000) / 1000; // Round down to 3 decimals
                    let totalAssigned = 0;

                    // Distribute amounts and handle rounding differences
                    variableIndividuals.forEach(function ($amountInput, index) {
                        if (index < variableCount - 1) {
                            $amountInput.val(amountPerIndividual.toFixed(3)); // Ensures exactly 3 decimal places
                            totalAssigned += parseFloat(amountPerIndividual.toFixed(3));
                        } else {
                            // Adjust the last amount to ensure the total matches
                            let finalAmount = remainingAmount - totalAssigned;
                            $amountInput.val(finalAmount.toFixed(3)); // Ensures exactly 3 decimal places
                        }
                    });
                }
            }

            function updateAmountsBasedOnInput(changedInput) {
                let totalAmount = parseFloat($('#totalAmount').val());
                let fixedAmounts = 0;
                let variableIndividuals = [];
                let remainingAmount;

                // Calculate fixed amounts and identify variable individuals
                $('.individual').each(function () {
                    let $fixCheckbox = $(this).find('.fix-individual');
                    let $amountInput = $(this).find('.amount');
                    let $checkbox = $(this).find('.select-individual');

                    if ($fixCheckbox.is(':checked')) {
                        let fixedAmount = parseFloat($amountInput.val());
                        fixedAmounts += fixedAmount;
                    } else if ($amountInput[0] !== changedInput[0] && $checkbox.is(':checked')) {
                        variableIndividuals.push($amountInput);
                    }
                });

                // Calculate remaining amount and distribute
                remainingAmount = totalAmount - fixedAmounts - parseFloat(changedInput.val());
                let variableCount = variableIndividuals.length;

                if (variableCount > 0) {
                    let amountPerIndividual = Math.floor((remainingAmount / variableCount) * 1000) / 1000; // Round down to 3 decimals
                    let totalAssigned = 0;

                    variableIndividuals.forEach(function ($amountInput, index) {
                        if (index < variableCount - 1) {
                            $amountInput.val(amountPerIndividual.toFixed(3)); // Ensures exactly 3 decimal places
                            totalAssigned += parseFloat(amountPerIndividual.toFixed(3));
                        } else {
                            // Adjust the last amount to ensure the total matches
                            let finalAmount = remainingAmount - totalAssigned;
                            $amountInput.val(finalAmount.toFixed(3)); // Ensures exactly 3 decimal places
                        }
                    });
                }
            }

            $('.fix-individual').change(function () {
                let $amountInput = $(this).closest('.individual').find('.amount');
                if ($(this).is(':checked')) {
                    $amountInput.addClass('fixed');
                    $amountInput.prop('readonly', true);
                } else {
                    $amountInput.removeClass('fixed');
                    $amountInput.prop('readonly', false);
                }
                distributeAmount();
            });

            $('.select-individual').change(function () {
                var isChecked = $(this).is(':checked');
                if (!isChecked) {
                    $(this).closest('.individual').find('.fix-individual').prop('checked', false);
                    $(this).closest('.individual').find('.amount').val('0.000'); // Ensures exactly 3 decimal places
                }
                distributeAmount();
            });



        });

        function ClearAll() {
            $("#ReasonList").val(null).trigger('change');
            $("#flatpickr-date").val(null);
            $("#AmountSubscribedDiv").hide();
            $("#flatpickrDiv").hide();
            $("#ShowAllNamesBtn").prop("disabled", true);
            $("#CardDetailsDiv").hide();
            $("#HasRecordDiv").hide();

        }
        function CollectData1() {
            const PersonIdAmount = [];
            var IsPaidCheckboxList = document.querySelectorAll('.IsPaid-checkbox');
            IsPaidCheckboxList.forEach((checkbox) => {
                var PersonId = checkbox.getAttribute('data-input-id');
                var AmountPersonElement = document.querySelector(`.Amount-inputs[data-PersonId="${PersonId}"]`);
                var Amount = AmountPersonElement.value; //593.354500000004 to 593.3545
                Amount = parseFloat(Amount).toFixed(3); // 593.3545 to 593.35
                PersonIdAmount.push(
                    {
                        'PersonId': PersonId,
                        'IsPaid': checkbox.checked,
                        'Amount': parseFloat(Amount)
                    }
                );
            });
            var IsRecord = '@Model.IsHasRecodes';
            var MonthYear = '@Model.YearMonth';
            var ReasonId = '@Model.ReasonId';
            var MonthlyAmountRecord = $('#totalAmount').val();

            if (MonthlyAmountRecord == 0 || MonthlyAmountRecord == '') {
                alert('أكتب مبلغ الصرف وضغط زر الأنتر او الأدخال')
                return;
            }

            var data = {
                'ReasonId': ReasonId,
                'PersonIdAmount': PersonIdAmount,
                'IsRecord': IsRecord,
                'MonthYear': MonthYear,
                'MonthlyAmountRecord': MonthlyAmountRecord
            };
            debugger;
            console.log(data);

            FillTruePaid(data.PersonIdAmount);

            $('#ConfirmModal').modal('show');
            $('#ConfirmModalFormSubmit').click(function () {
                //PersonIdAmount.length = 0;
                SaveData(data);
            });
        }

        function CollectData() {
            var individuals = document.querySelectorAll('.individual');
            var PersonIdAmount = [];
            individuals.forEach((individual) => {
                var PersonId = individual.getAttribute('data-PersonId');
                var PersonName = individual.getAttribute('data-PersonName');
                var AmountElement = individual.querySelector('.amount');
                var Amount = AmountElement.value;
                var IsPaidElement = individual.querySelector('.select-individual');
                var IsPaid = IsPaidElement.checked;
                var IsFixedElement = individual.querySelector('.fix-individual');
                var IsFixed = IsFixedElement.checked;
                PersonIdAmount.push({
                    'PersonId': PersonId,
                    'PersonName': PersonName,
                    'Amount': parseFloat(Amount),
                    'IsPaid': IsPaid,
                    'IsFixed': IsFixed
                });
            });

            var IsRecord = '@Model.IsHasRecodes';
            var MonthYear = '@Model.YearMonth';
            var ReasonId = '@Model.ReasonId';
            var MonthlyAmountRecord = $('#totalAmount').val();
            if (MonthlyAmountRecord == 0 || MonthlyAmountRecord == '') {
                alert('أكتب مبلغ الصرف وضغط زر الأنتر او الأدخال')
                return;
            }

            var data = {
                'ReasonId': ReasonId,
                'PersonIdAmount': PersonIdAmount,
                'IsRecord': IsRecord,
                'MonthYear': MonthYear,
                'MonthlyAmountRecord': MonthlyAmountRecord
            };
            FillTruePaid(data.PersonIdAmount);
            $('#ConfirmModal').modal('show');
            $('#ConfirmModalFormSubmit').click(function () {
                SaveData(data);
            });
        }
        function SaveData(data) {
            $.ajax({
                url: '@Url.Action("ModifySpendMoneyForReasonAjax", "Create")',
                type: 'POST',
                data: data,
                success: function (response) {
                    if (response.status) {
                        alert("تم الحفظ بنجاح");
                        var url = '@Url.Action("SpendMoneyForReason", "Create")';
                        url += '?ReasonId=' + '@Model.ReasonId';
                        url += '&YearMonth=' + '@Model.YearMonth';
                        window.location.href = url;
                    } else {
                        alert(response.message);
                    }
                },
                error: function (response) {
                    alert("حدث خطأ أثناء الحفظ");
                }
            });

        }


        function FillTruePaid(MonthlyPaidData) {
            var WillPaidTable = $('#WillPaidTable');
            var WillNotSelectedTable = $('#WillNotSelectedTable');
            var WillPaidTableBody = WillPaidTable.find('tbody');
            var WillNotSelectedTableBody = WillNotSelectedTable.find('tbody');

            // BicStatestic
            var BicStatestic = $('#BicStatestic');
            var BicStatesticBody = BicStatestic.find('tbody');
            BicStatesticBody.empty();
            // عدد  الأشخاص الذين دفعوا
            var WillPaidCount = 0;
            // عدد الأشخاص الذين لم يدفعوا
            var WillNotSelectedCount = 0;
            // مجموع المبالغ التي تم دفعها
            let WillPaidAmount = 0;

            WillPaidTableBody.empty();
            WillNotSelectedTableBody.empty();

            var WillPaidTableBodyHtml = '';
            var WillNotSelectedTableBodyHtml = '';
            MonthlyPaidData.forEach((item) => {
                var Amount = parseFloat(item.Amount);
                if (item.IsPaid) {
                    WillPaidCount++;
                    WillPaidAmount += Amount;
                    WillPaidTableBodyHtml += '<tr><td>' + item.PersonName + '</td><td>' + Amount + ' ريال</td></tr>';
                }
                else {
                    WillNotSelectedTableBodyHtml += '<tr><td>' + item.PersonName + '</td></tr>';
                    WillNotSelectedCount++;
                }

            });
            WillPaidTableBody.append(WillPaidTableBodyHtml);
            WillNotSelectedTableBody.append(WillNotSelectedTableBodyHtml);

            WillPaidAmount = WillPaidAmount.toFixed(3);
            var WillPaidCountTaxt = 'عدد الأشخاص الذين دفعوا : ' + WillPaidCount + ' أشخاص';
            var WillNotSelectedCountTaxt = 'عدد الأشخاص الذين لم يدفعوا : ' + WillNotSelectedCount + ' أشخاص'
            var WillPaidAmountTaxt = 'مجموع المبالغ التي تم دفعها : ' + WillPaidAmount + ' ريال';
            var BicStatesticBodyHtml = '<tr><td>' + WillPaidCountTaxt + '</td></tr><tr><td>' + WillNotSelectedCountTaxt + '</td></tr><tr><td>' + WillPaidAmountTaxt + '</td></tr>';
            BicStatesticBody.append(BicStatesticBodyHtml);


        }












    </script>



}

