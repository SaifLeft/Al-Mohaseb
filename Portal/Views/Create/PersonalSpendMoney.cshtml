@using Portal.Models.ViewModels;
@model CreatePersonalSpendMoneyVM;
@{
    ViewData["Title"] = "صرف جديد";
}

<!-- Content Page -->
<div class="container-xxl flex-grow-1 container-p-y ">
    <div class="d-flex align-items-center justify-content-center h-px-600">
        <form id="formRequest" class="card w-px-600 border border-info border-3 rounded p-3 p-md-5" asp-controller="Create" asp-action="PersonalSpendMoney" method="POST">
            <h5 class="mb-5">صرف مبلغ من حساب شخص</h5>
            <div class="mb-3">
                <label class="form-label" for="fullname">اسم الشخص</label>
                <div class="select2-primary">
                    <select asp-for="NameId" id="NamesList" name="NameId" class="select2 form-select" required>
                    </select>
                </div>
            </div>
            <span asp-validation-for="NameId" class="text-danger"></span>
            <div class="mb-3">
                <label class="form-label" for="civil-number">تاريخ الصرف</label>
                <input asp-for="Date" type="text" name="Date" class="form-control flatpickr-input" required placeholder="yyyy-MM-dd" id="flatpickr-date" readonly="readonly">
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label class="form-label" for="Amount">صرف بقيمة</label>
                <input asp-for="Amount" type="text" name="Amount" class="form-control" required>
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label class="form-label" for="Description">وصف السبب</label>
                <input asp-for="Description" type="text" name="Description" class="form-control" required>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary float-end">حفظ</button>
            </div>
        </form>
    </div>
</div>



@section Stylesheet {
    <link rel="stylesheet" href="~/assets/vendor/libs/sweetalert2/sweetalert2.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/datatables-bs5/datatables.bootstrap5.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/select2/select2.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/flatpickr/flatpickr.css">
    <link rel="stylesheet" href="~/assets/vendor/libs/formvalidation/dist/css/formValidation.css" />

}

@section Scripts {
    <script src="~/assets/vendor/libs/datatables/jquery.dataTables.js"></script>
    <script src="~/assets/vendor/libs/select2/select2.js"></script>
    <script src="~/assets/vendor/libs/formvalidation/dist/js/FormValidation.js"></script>
    <script src="~/assets/vendor/libs/formvalidation/dist/js/plugins/Bootstrap5.min.js"></script>
    <script src="~/assets/vendor/libs/formvalidation/dist/js/plugins/AutoFocus.min.js"></script>
    <script src="~/assets/vendor/libs/sweetalert2/sweetalert2.js"></script>
    <script src="~/assets/vendor/libs/flatpickr/flatpickr.js"></script>


    <script>

        $(document).ready(function () {

            //flatpickr-date with date only format and range from today to 30 days later
            $('#flatpickr-date').flatpickr({
                dateFormat: 'Y-m-d',
                monthSelectorType: 'static',
                maxDate: 'today'
            });

            // Select2 init
            $('.select2').each(function () {
                $(this)
                    .wrap('<div class="position-relative"></div>')
                    .select2({
                        dropdownParent: $(this).parent(),
                        placeholder: 'اختر',
                    });
            });
            $.ajax({
                url: '@Url.Action("GetNames", "List")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    console.log(data);
                    var options2 = $("#NamesList");
                    $.each(data, function () {
                        options2.append($("<option />").val(this.id).text(this.name));
                    });

                    options2.val(null).trigger("change");

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });

            const formAuthentication = document.querySelector('#formRequest');

            if (formRequest.length) { // Check if formRequest exists and is not empty
                const fv = FormValidation.formValidation(formAuthentication, {
                    fields: {
                        NameId: {
                            validators: {
                                notEmpty: {
                                    message: 'الرجاء اختيار الاسم'
                                }
                            }
                        },
                        Date: {
                            validators: {
                                notEmpty: {
                                    message: 'الرجاء اختيار التاريخ'
                                },
                                date: {
                                    format: 'YYYY-MM-DD',
                                    message: 'الرجاء ادخال تاريخ صحيح'
                                }
                            }
                        },
                        Amount: {
                            validators: {
                                notEmpty: {
                                    message: 'الرجاء ادخال القيمة'
                                },
                                numeric: {
                                    message: 'الرجاء ادخال قيمة صحيحة بالارقام مثلا 150.654'
                                }
                            }
                        },
                        Description: {
                            validators: {
                                notEmpty: {
                                    message: 'الرجاء ادخال الوصف'
                                }
                            }
                        }
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap5: new FormValidation.plugins.Bootstrap5({
                            eleValidClass: '',
                            rowSelector: '.mb-3'
                        }),
                        submitButton: new FormValidation.plugins.SubmitButton(),

                        defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                        autoFocus: new FormValidation.plugins.AutoFocus()
                    },
                    init: instance => {
                        instance.on('plugins.message.placed', function (e) {
                            if (e.element.parentElement.classList.contains('input-group')) {
                                e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);
                            }
                        });
                    }
                });
            }






        });
    </script>


}
